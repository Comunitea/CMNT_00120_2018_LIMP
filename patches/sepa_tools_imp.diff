=== modified file 'account_payment_direct_debit/model/account_invoice.py'
--- account_payment_direct_debit/model/account_invoice.py   2014-02-11 18:29:05 +0000
+++ account_payment_direct_debit/model/account_invoice.py   2014-05-30 12:06:29 +0000
@@ -2,7 +2,7 @@
 ##############################################################################
 #
 #    Copyright (C) 2011 - 2013 Therp BV (<http://therp.nl>).
-#
+#
 #    All other contributions are (C) by their respective contributors
 #
 #    All Rights Reserved
@@ -33,12 +33,12 @@

 Invoice workflow:

-1 the sale leads to
+1 the sale leads to
    1300 Debtors 100
    8000 Sales       100

-Balance:
-  Debtors  2000 |
+Balance:
+  Debtors  2000 |
   Sales        | 2000

 2 an external booking takes place
@@ -59,11 +59,11 @@

    2000 Transfer account 100 |
    1300 Debtors              | 100
-   Reconciliation takes place between 1 and 2a.
+   Reconciliation takes place between 1 and 2a.
    The invoice gets set to state 'paid', and 'reconciled' = True

 Balance:
-   Debtors             0 |
+   Debtors             0 |
    Transfer account 2000 |
    Bank                0 |
    Sales                 | 2000
@@ -76,7 +76,7 @@
   Reconciliation takes place between 3a and 2a

 Balance:
-   Debtors             0 |
+   Debtors             0 |
    Transfer account    0 |
    Bank             2000 |
    Sales                 | 2000
@@ -84,59 +84,59 @@
 4 a storno from invoice [1] triggers a new booking on the bank account
   1300 Debtors 100 |
   1100 Bank        | 100
-
+
 Balance:
-   Debtors           100 |
+   Debtors           100 |
    Transfer account    0 |
    Bank             1900 |
    Sales                 | 2000

-   The reconciliation of 2a is undone. The booking of 2a is reconciled
+   The reconciliation of 2a is undone. The booking of 2a is reconciled
    with the booking of 4 instead.
    The payment line attribute 'storno' is set to True and the invoice
    state is no longer 'paid'.

 Two cases need to be distinguisted:
    1) If the storno is a manual storno from the partner, the invoice is set to
-      state 'debit_denied', with 'reconciled' = False
+      state 'debit_denied', with 'reconciled' = False
       This module implements this option by allowing the bank module to call
-
+
           netsvc.LocalService("workflow").trg_validate(
               uid, 'account.invoice', ids, 'debit_denied', cr)

    2) If the storno is an error generated by the bank (assumingly non-fatal),
       the invoice is reopened for the next debit run. This is a call to existing
-
+
          netsvc.LocalService("workflow").trg_validate(
              uid, 'account.invoice', ids, 'open_test', cr)

       Should also be adding a log entry on the invoice for tracing purposes

-         self._log_event(cr, uid, ids, -1.0, 'Debit denied')
+         self._log_event(cr, uid, ids, -1.0, 'Debit denied')

       If not for that funny comment
       "#TODO: implement messages system"  in account/invoice.py

    Repeating non-fatal fatal errors need to be dealt with manually by checking
    open invoices with a matured invoice- or due date.
-"""
+"""

 class account_invoice(osv.osv):
     _inherit = "account.invoice"

     def __init__(self, pool, cr):
-        """
+        """
         Adding a state to the hardcoded state list of the inherited
-        model. The alternative is duplicating the field definition
+        model. The alternative is duplicating the field definition
         in columns but only one module can do that!

         Maybe apply a similar trick when overriding the buttons' 'states' attributes
         in the form view, manipulating the xml in fields_view_get().
-        """
+        """
         super(account_invoice, self).__init__(pool, cr)
         invoice_obj = pool.get('account.invoice')
-        invoice_obj._columns['state'].selection.append(
-            ('debit_denied', 'Debit denied'))
+        if ('debit_denied', 'Debit denied') not in invoice_obj._columns['state'].selection:
+            invoice_obj._columns['state'].selection.append(('debit_denied', 'Debit denied'))

     def action_debit_denied(self, cr, uid, ids, context=None):
         for invoice_id in ids:
@@ -144,7 +144,7 @@
                 number = self.read(
                     cr, uid, invoice_id, ['number'], context=context)['number']
                 raise osv.except_osv(
-                    _('Error !'),
+                    _('Error !'),
                     _('You cannot set invoice \'%s\' to state \'debit denied\', ' +
                       'as it is still reconciled.') % number)
         self.write(cr, uid, ids, {'state': 'debit_denied'}, context=context)
@@ -154,13 +154,13 @@
         return True

     def test_undo_debit_denied(self, cr, uid, ids, context=None):
-        """
+        """
         Called from the workflow. Used to unset paid state on
-        invoices that were paid with bank transfers which are being cancelled
+        invoices that were paid with bank transfers which are being cancelled
         """
         for invoice in self.read(cr, uid, ids, ['reconciled'], context):
             if not invoice['reconciled']:
                 return False
         return True

-account_invoice()
\ No newline at end of file
+account_invoice()

=== modified file 'account_payment_direct_debit/view/account_invoice.xml'
--- account_payment_direct_debit/view/account_invoice.xml   2014-02-11 18:29:05 +0000
+++ account_payment_direct_debit/view/account_invoice.xml   2014-05-30 12:04:40 +0000
@@ -7,7 +7,7 @@
             <field name="inherit_id" ref="account.invoice_form"/>
             <field name="arch" type="xml">
                 <data>
-                    <!--
+                    <!--
                          Add new state 'debit_denied' to applicable buttons.
                          Maybe apply trick in fields_view_get instead, for
                          better compatibility with other modules?
@@ -19,6 +19,9 @@
                         <button name="invoice_debit_denied" states="paid"
                                 string="Debit Denied" icon="gtk-cancel"/>
                     </button>
+                    <button name="%(account.action_account_state_open)d" position="replace">
+                        <button name="%(account.action_account_state_open)d" type='action' string='Re-Open' states='paid,debit_denied' icon="gtk-convert" groups="base.group_no_one"/>
+                    </button>
                </data>
             </field>
         </record>

=== modified file 'account_payment_direct_debit/workflow/account_invoice.xml'
--- account_payment_direct_debit/workflow/account_invoice.xml   2014-02-11 18:29:05 +0000
+++ account_payment_direct_debit/workflow/account_invoice.xml   2014-05-30 12:26:35 +0000
@@ -8,7 +8,7 @@
             <field name="kind">function</field>
         </record>
        <record id="paid_to_debit_denied" model="workflow.transition">
-            <!--
+            <!--
                  Set an invoice to state debit denied, either manually
                  or by confirming a bank statement line that constitutes
                  a fatal storno
@@ -18,7 +18,7 @@
             <field name="signal">invoice_debit_denied</field>
         </record>
        <record id="open_test_to_debit_denied" model="workflow.transition">
-            <!--
+            <!--
                  A storno leads to unreconciling the move line, which
                  reopens the invoice. We need to allow a transition from
                  this state to the debit denied state if the storno is fatal.
@@ -28,17 +28,18 @@
             <field name="signal">invoice_debit_denied</field>
         </record>
        <record id="debit_denied_to_paid" model="workflow.transition">
-            <!--
+            <!--
                  Cancel a bank statement line that constitutes a fatal
                  storno
             -->
             <field name="act_from" ref="act_debit_denied"/>
             <field name="act_to" ref="account.act_paid"/>
-            <field name="condition">test_undo_debit_denied()</field>
-            <field name="signal">undo_debit_denied</field>
+            <field name="trigger_model">account.move.line</field>
+            <field name="trigger_expr_id">move_line_id_payment_get()</field>
+            <field name="condition">test_paid()</field>
         </record>
         <record id="debit_denied_to_open" model="workflow.transition">
-            <!--
+            <!--
                  Allow the user to manually reset a debit denied status
                  on a paid invoice (but only after manually unreconciling
                  the invoice)

=== modified file 'account_payment_pain_base/banking_export_pain.py'
--- account_payment_pain_base/banking_export_pain.py    2014-02-11 18:29:05 +0000
+++ account_payment_pain_base/banking_export_pain.py    2014-03-18 17:18:45 +0000
@@ -154,7 +154,6 @@
                 'file_id': file_id,
                 'state': 'finish',
             }, context=context)
-
         action = {
             'name': 'SEPA File',
             'type': 'ir.actions.act_window',
@@ -264,10 +263,10 @@
         initiating_party_identifier = self.pool.get('res.company').\
             _get_initiating_party_identifier(
                 cr, uid,
-                gen_args['sepa_export'].payment_order_ids[0].mode.type.company_id.id,
+                gen_args['sepa_export'].payment_order_ids[0].mode.company_id.id,
                 context=context)
         initiating_party_issuer = gen_args['sepa_export'].\
-            payment_order_ids[0].mode.type.company_id.initiating_party_issuer
+            payment_order_ids[0].mode.company_id.initiating_party_issuer
         if initiating_party_identifier and initiating_party_issuer:
             iniparty_id = etree.SubElement(initiating_party_1_8, 'Id')
             iniparty_org_id = etree.SubElement(iniparty_id, 'OrgId')
@@ -437,5 +436,5 @@
             csi_scheme_name, 'Prtry')
         csi_scheme_name_proprietary.text = scheme_name_proprietary
         return True
-
+
 banking_export_pain()

=== modified file 'account_payment_sepa_credit_transfer/wizard/export_sepa.py'
--- account_payment_sepa_credit_transfer/wizard/export_sepa.py  2014-02-11 18:29:05 +0000
+++ account_payment_sepa_credit_transfer/wizard/export_sepa.py  2014-04-10 15:31:06 +0000
@@ -58,7 +58,7 @@
             "to be borne by the creditor. Borne by debtor : all transaction "
             "charges are to be borne by the debtor."),
         'nb_transactions': fields.related(
-            'file_id', 'nb_transactions', type='integer',
+            'file_id', 'nb_transactions', type='char',
             string='Number of Transactions', readonly=True),
         'total_amount': fields.related(
             'file_id', 'total_amount', type='float', string='Total Amount',
@@ -251,7 +251,7 @@
                 self.generate_party_block(
                     cr, uid, credit_transfer_transaction_info_2_27, 'Cdtr',
                     'C', 'line.partner_id.name', 'line.bank_id.iban',
-                    'line.bank_id.bank.bic', line.bank_id.id,
+                    'line.bank_id.bank.bic', line.bank_id.id,
                     {'line': line}, gen_args, context=context)

                 self.generate_remittance_info_block(
@@ -268,6 +268,10 @@
         else:
             nb_of_transactions_1_6.text = str(transactions_count_1_6)
             control_sum_1_7.text = '%.2f' % amount_control_sum_1_7
+        # LLamada a  set_done en payment.order para hacer movimientos contables del pago
+        # cuando create_account_moves = 'direct-payment'
+        payment_order_ids = context.get('active_ids', [])
+        self.pool.get('payment.order').set_done(cr, uid, payment_order_ids, context)
         return self.finalize_sepa_file_creation(
             cr, uid, ids, xml_root, total_amount, transactions_count_1_6,
             gen_args, context=context)

=== modified file 'account_payment_sepa_direct_debit/company.py'
--- account_payment_sepa_direct_debit/company.py    2014-02-11 18:29:05 +0000
+++ account_payment_sepa_direct_debit/company.py    2014-03-18 19:11:55 +0000
@@ -87,4 +87,4 @@
             "Invalid SEPA Creditor Identifier.",
             ['sepa_creditor_identifier']),
     ]
-res_company()
\ No newline at end of file
+res_company()

=== modified file 'account_payment_sepa_direct_debit/sdd_mandate_view.xml'
--- account_payment_sepa_direct_debit/sdd_mandate_view.xml  2014-02-11 18:29:05 +0000
+++ account_payment_sepa_direct_debit/sdd_mandate_view.xml  2014-03-13 09:57:32 +0000
@@ -10,6 +10,7 @@
 <record id="sdd_mandate_form" model="ir.ui.view">
     <field name="name">sdd.mandate.form</field>
     <field name="model">sdd.mandate</field>
+    <field name="type">form</field>
     <field name="arch" type="xml">
         <form string="SEPA Direct Debit Mandate">
             <group colspan="4">
@@ -45,6 +46,7 @@
 <record id="sdd_mandate_tree" model="ir.ui.view">
     <field name="name">sdd.mandate.tree</field>
     <field name="model">sdd.mandate</field>
+    <field name="type">tree</field>
     <field name="arch" type="xml">
         <tree string="SEPA Direct Debit Mandate" colors="blue:state=='draft';black:state in ('expired', 'cancel')">
             <field name="company_id" groups="base.group_multi_company"/>
@@ -61,6 +63,7 @@
 <record id="sdd_mandate_search" model="ir.ui.view">
     <field name="name">sdd.mandate.search</field>
     <field name="model">sdd.mandate</field>
+    <field name="type">search</field>
     <field name="arch" type="xml">
         <search string="Search SEPA Direct Debit Mandates">
             <field name="partner_id"/>
@@ -76,9 +79,11 @@

 <record id="sdd_mandate_action" model="ir.actions.act_window">
     <field name="name">SEPA Direct Debit Mandates</field>
+    <field name="type">ir.actions.act_window</field>
     <field name="res_model">sdd.mandate</field>
     <field name="view_type">form</field>
     <field name="view_mode">tree,form</field>
+    <field name="search_view_id" ref="sdd_mandate_search"/>
     <field name="arch" type="xml">
        <label string="Click to create a new SEPA Direct Debit Mandate.
         A SEPA Direct Debit Mandate is a document signed by your customer that gives you the autorization to do one or several direct debits on his bank account." colspan="4"/>

=== modified file 'account_payment_sepa_direct_debit/wizard/export_sdd.py'
--- account_payment_sepa_direct_debit/wizard/export_sdd.py  2014-02-11 18:29:05 +0000
+++ account_payment_sepa_direct_debit/wizard/export_sdd.py  2014-04-10 15:30:06 +0000
@@ -58,7 +58,7 @@
             "borne by the creditor. Borne by debtor : all transaction "
             "charges are to be borne by the debtor."),
         'nb_transactions': fields.related(
-            'file_id', 'nb_transactions', type='integer',
+            'file_id', 'nb_transactions', type='char',
             string='Number of Transactions', readonly=True),
         'total_amount': fields.related(
             'file_id', 'total_amount', type='float', string='Total Amount',
@@ -400,7 +400,11 @@
             control_sum_2_5.text = '%.2f' % amount_control_sum_2_5
         nb_of_transactions_1_6.text = str(transactions_count_1_6)
         control_sum_1_7.text = '%.2f' % amount_control_sum_1_7
-
+
+        # LLamada a  set_done en payment.order para hacer movimientos contables del adeudo
+        # cuando create_account_moves = 'direct-payment'
+        payment_order_ids = context.get('active_ids', [])
+        self.pool.get('payment.order').set_done(cr, uid, payment_order_ids, context)
         return self.finalize_sepa_file_creation(
             cr, uid, ids, xml_root, total_amount, transactions_count_1_6,
             gen_args, context=context)
@@ -451,4 +455,4 @@
                     'sepa_migrated': True,
                 }, context=context)
         return {'type': 'ir.actions.act_window_close'}
-banking_export_sdd_wizard()
\ No newline at end of file
+banking_export_sdd_wizard()

